@model DashboardPrintModel
@using System.Configuration
@using CarbonKnown.MVC.Code
@using CarbonKnown.MVC.Constants
@using CarbonKnown.MVC.Models
@using Newtonsoft.Json
@{
    ViewBag.Title = "Print Dashboard";
    Layout = "../Shared/_PrintLayout.cshtml";
    var summary = Model.Summary;
    var request = Model.Request;
}
@functions
{

    static string ChartHeading(DashboardSummary summary, DashboardRequest request)
    {
        if (!summary.slices.Any())
        {
            return string
                .Format("No recorded {0} emissions for {1}  {2:" + Constants.DateFormat + "} - {3:" + Constants.DateFormat + "}",
                        summary.costCentre,
                        summary.activityGroup,
                        request.StartDate,
                        request.EndDate);
        }
        return
            string.Format(request.Dimension == Dimension.CostCentre ?
                              "{0} carbon emissions {1} {2:" + Constants.DateFormat + "} - {3:" + Constants.DateFormat + "}" :
                              "{1}\\'s divisions {0} emissions {2:" + Constants.DateFormat + "} - {3:" + Constants.DateFormat + "}",
                          summary.activityGroup,
                          summary.costCentre,
                          request.StartDate,
                          request.EndDate);
    }

    private static string SliceArray(DashboardSummary summary, DashboardRequest request)
    {
        var sliceArray = summary
            .slices
            .Select(slice => new
                {
                    y = (summary.total <= 0) ? 0 : (slice.amount/summary.total)*100,
                    color = "#" + slice.color,
                    name = slice.title,
                    sliced = string.Equals(request.SelectedSliceId, slice.sliceId, StringComparison.InvariantCultureIgnoreCase)
                }).ToArray();
        return JsonConvert.SerializeObject(sliceArray);
    }

}
@section Scripts
{
    @Scripts.Render(
    "~/Scripts/jquery",
    "~/Scripts/charts")
    <script type="text/javascript">
        (function(readyfunction) {
            readyfunction(window, document, window.angular, window.jQuery);
        }(function(window, document, angular, $, undefined) {
            'use strict';
            $(document).ready(function() {

                $('#mainChart').highcharts({
                    chart: {
                        plotBackgroundColor: null,
                        plotBorderWidth: null,
                        plotShadow: true
                    },
                    tooltip: {
                        enabled: false
                    },
                    credits: {
                        enabled: false
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            animation: null
                        }
                    },
                    loading: false,
                    title: {
                        text: '@Html.Raw(ChartHeading(summary, request))',
                        style: {
                            fontSize: '14px',
                            lineHeight: '26px',
                            color: '#eb7a28',
                            width: '300px'
                        }
                    },
                    series: [{
                        type: 'pie',
                        innerSize: '75%',
                        dataLabels: {
                            enabled: false
                        },
                        data: @Html.Raw(SliceArray(summary, request))
                    }]
                });
                $('.ck-resize').each(function() {
                    var element = $(this);
                    var text = element.val();
                    if (!text) text = element.text();
                    text = text.replace(/\s/g, '0');

                    var elementFontSize = element.css('fontSize');
                    var fontWeight = element.css('fontWeight');
                    var fontFamily = element.css('fontFamily');
                    var resizeSpan = $('<span >' + text + '</span>');
                    resizeSpan.css({
                        'fontSize': elementFontSize,
                        'fontWeight': fontWeight,
                        'fontFamily': fontFamily,
                        'position': 'absolute',
                        'whitespace': 'nowrap'
                    });
                    resizeSpan.appendTo("#left-article");

                    var fontSize = parseInt(resizeSpan.css('font-size'), 10);
                    var width = resizeSpan.outerWidth(true);
                    var targetwidth = element.innerWidth();

                    while (width > targetwidth) {
                        fontSize--;
                        resizeSpan.css({ 'fontSize': fontSize + 'px' });
                        var newWidth = resizeSpan.outerWidth(true);
                        if (fontSize == 0) break;
                        width = newWidth;
                    }
                    resizeSpan.detach();
                    element.css({ fontSize: fontSize + 'px' });
                });
            });
        }));
    </script>
}
@section Styles
{
    @Styles.Render("~/Content/dashboardprint")
}
<header id="header">
    @if (File.Exists(Server.MapPath(ConfigurationManager.AppSettings["imageurl"])))
    {
        <img src="@Html.AbsoluteUrl(ConfigurationManager.AppSettings["imageurl"])" class="company-logo" alt="company logo" />
    }
</header>
<section id="content-section" class="print">
    <section id="left-article">
        @if (summary.displayTotal)
        {
            <section class="side-panel">
                <header>Total</header>
                <h1 class="ck-resize">@Html.FormatNumber(summary.total)</h1>
                <div class="side-panel-footnote">
                    <div class="side-panel-footnote">@Html.Raw(summary.co2label)</div>
                </div>
            </section>
        }
        <section class="side-panel">
            <header>Total Consumption Cost</header>
            @foreach (var currency in summary.currencies)
            {
                <h1 class="ck-resize" class="highlight">@Html.Raw(currency)</h1>
            }
        </section>
        @if (summary.displayTotal)
        {
            <section class="side-panel">
                <header>YEAR-ON-YEAR COMPARISON</header>
                <h1 class="highlight ck-resize dashboard-legend-item @(summary.yoy <= 0 ? "change-decrease" : "change-increase")" >@summary.yoy%</h1>
                <div class="side-panel-footnote date-footnote">@string.Format("{0:" + Constants.DateFormat + "} - {1:" + Constants.DateFormat + "}", request.StartDate, request.EndDate)</div>
            </section>
        }
    </section>
    <section id="right-article">
        <div id="legend-container" class="print">
            <ul id="chart-legend">
                @foreach (var slice in summary.slices)
                {
                    <li class="dashboard-legend-item">
                        <div class="legend-square" style="background-color: #@slice.color">
                        </div>
                        <div class="legend-description-container">
                            <header>
                                <span class="legend-title print">@slice.title</span>
                                <span class="legend-seperator"></span>
                                <span class="legend-amount">@Html.FormatNumber(slice.amount)</span>
                                <span class="legend-amount">@Html.Raw(slice.co2label)</span>
                            </header>
                            <span class="legend-description">@slice.description</span>
                            <span>(@Html.FormatNumber(slice.units) @Html.Raw(slice.uom))</span>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div id="chart-container">
            <div id="chart-tooltip">
                @{
                    var selectedSlice = summary.slices.FirstOrDefault(slice => string.Equals(request.SelectedSliceId, slice.sliceId, StringComparison.InvariantCultureIgnoreCase));
                    if (selectedSlice != null)
                    {
                        var percent = (summary.total <= 0) ? 0 : selectedSlice.amount/summary.total;
                        <div>@selectedSlice.title</div>
                        <div>@string.Format("{0:P}", percent)</div>
                    }
                }
            </div>
            <div id="mainChart" class="print" />
        </div>
    </section>
</section>
