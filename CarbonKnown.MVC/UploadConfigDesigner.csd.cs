//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarbonKnown.MVC
{
    
    
    /// <summary>
    /// The UploadConfig Configuration Section.
    /// </summary>
    public partial class UploadConfig : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the UploadConfig Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UploadConfigSectionName = "uploadConfig";
        
        /// <summary>
        /// Gets the UploadConfig instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::CarbonKnown.MVC.UploadConfig Instance
        {
            get
            {
                return ((global::CarbonKnown.MVC.UploadConfig)(global::System.Configuration.ConfigurationManager.GetSection(global::CarbonKnown.MVC.UploadConfig.UploadConfigSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.UploadConfig.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::CarbonKnown.MVC.UploadConfig.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region StagingFolder Property
        /// <summary>
        /// The XML name of the <see cref="StagingFolder"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string StagingFolderPropertyName = "stagingFolder";
        
        /// <summary>
        /// Gets or sets the StagingFolder.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The StagingFolder.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.UploadConfig.StagingFolderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string StagingFolder
        {
            get
            {
                return ((string)(base[global::CarbonKnown.MVC.UploadConfig.StagingFolderPropertyName]));
            }
            set
            {
                base[global::CarbonKnown.MVC.UploadConfig.StagingFolderPropertyName] = value;
            }
        }
        #endregion
        
        #region FileTypes Property
        /// <summary>
        /// The XML name of the <see cref="FileTypes"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FileTypesPropertyName = "fileTypes";
        
        /// <summary>
        /// Gets or sets the FileTypes.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The FileTypes.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.UploadConfig.FileTypesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::CarbonKnown.MVC.FileTypes FileTypes
        {
            get
            {
                return ((global::CarbonKnown.MVC.FileTypes)(base[global::CarbonKnown.MVC.UploadConfig.FileTypesPropertyName]));
            }
            set
            {
                base[global::CarbonKnown.MVC.UploadConfig.FileTypesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace CarbonKnown.MVC
{
    
    
    /// <summary>
    /// A collection of FileType instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::CarbonKnown.MVC.FileType), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::CarbonKnown.MVC.FileTypes.FileTypePropertyName)]
    public partial class FileTypes : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::CarbonKnown.MVC.FileType"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FileTypePropertyName = "fileType";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::CarbonKnown.MVC.FileTypes.FileTypePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::CarbonKnown.MVC.FileTypes.FileTypePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::CarbonKnown.MVC.FileType)(element)).Handler;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::CarbonKnown.MVC.FileType"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::CarbonKnown.MVC.FileType"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::CarbonKnown.MVC.FileType();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::CarbonKnown.MVC.FileType"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::CarbonKnown.MVC.FileType"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::CarbonKnown.MVC.FileType this[int index]
        {
            get
            {
                return ((global::CarbonKnown.MVC.FileType)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::CarbonKnown.MVC.FileType"/> with the specified key.
        /// </summary>
        /// <param name="handler">The key of the <see cref="global::CarbonKnown.MVC.FileType"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::CarbonKnown.MVC.FileType this[object handler]
        {
            get
            {
                return ((global::CarbonKnown.MVC.FileType)(base.BaseGet(handler)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::CarbonKnown.MVC.FileType"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="fileType">The <see cref="global::CarbonKnown.MVC.FileType"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::CarbonKnown.MVC.FileType fileType)
        {
            base.BaseAdd(fileType);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::CarbonKnown.MVC.FileType"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="fileType">The <see cref="global::CarbonKnown.MVC.FileType"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::CarbonKnown.MVC.FileType fileType)
        {
            base.BaseRemove(this.GetElementKey(fileType));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::CarbonKnown.MVC.FileType"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::CarbonKnown.MVC.FileType"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::CarbonKnown.MVC.FileType GetItemAt(int index)
        {
            return ((global::CarbonKnown.MVC.FileType)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::CarbonKnown.MVC.FileType"/> with the specified key.
        /// </summary>
        /// <param name="handler">The key of the <see cref="global::CarbonKnown.MVC.FileType"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::CarbonKnown.MVC.FileType GetItemByKey(string handler)
        {
            return ((global::CarbonKnown.MVC.FileType)(base.BaseGet(((object)(handler)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace CarbonKnown.MVC
{
    
    
    /// <summary>
    /// The FileType Configuration Element.
    /// </summary>
    public partial class FileType : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Handler Property
        /// <summary>
        /// The XML name of the <see cref="Handler"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HandlerPropertyName = "handler";
        
        /// <summary>
        /// Gets or sets the Handler.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Handler.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.FileType.HandlerPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Handler
        {
            get
            {
                return ((string)(base[global::CarbonKnown.MVC.FileType.HandlerPropertyName]));
            }
            set
            {
                base[global::CarbonKnown.MVC.FileType.HandlerPropertyName] = value;
            }
        }
        #endregion
        
        #region Folder Property
        /// <summary>
        /// The XML name of the <see cref="Folder"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string FolderPropertyName = "folder";
        
        /// <summary>
        /// Gets or sets the Folder.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Folder.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.FileType.FolderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Folder
        {
            get
            {
                return ((string)(base[global::CarbonKnown.MVC.FileType.FolderPropertyName]));
            }
            set
            {
                base[global::CarbonKnown.MVC.FileType.FolderPropertyName] = value;
            }
        }
        #endregion
        
        #region Description Property
        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Description.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.FileType.DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[global::CarbonKnown.MVC.FileType.DescriptionPropertyName]));
            }
            set
            {
                base[global::CarbonKnown.MVC.FileType.DescriptionPropertyName] = value;
            }
        }
        #endregion
        
        #region DisplayName Property
        /// <summary>
        /// The XML name of the <see cref="DisplayName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DisplayNamePropertyName = "displayName";
        
        /// <summary>
        /// Gets or sets the DisplayName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DisplayName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::CarbonKnown.MVC.FileType.DisplayNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string DisplayName
        {
            get
            {
                return ((string)(base[global::CarbonKnown.MVC.FileType.DisplayNamePropertyName]));
            }
            set
            {
                base[global::CarbonKnown.MVC.FileType.DisplayNamePropertyName] = value;
            }
        }
        #endregion
    }
}
